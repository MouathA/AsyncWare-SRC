
//package com.nquantum.module.combat;
//
//import com.nquantum.Asyncware;
//import com.nquantum.event.Punjabi;
//import com.nquantum.event.impl.Event2D;
//import com.nquantum.event.impl.Event3D;
//import com.nquantum.event.impl.EventPostMotionUpdate;
//import com.nquantum.event.impl.EventPreMotionUpdate;
//import com.nquantum.module.Category;
//import com.nquantum.module.Module;
//import com.nquantum.module.customize.HUD;
//import com.nquantum.util.*;
//import net.minecraft.client.gui.Gui;
//import net.minecraft.client.gui.GuiScreen;
//import net.minecraft.client.gui.inventory.GuiInventory;
//import net.minecraft.client.renderer.GlStateManager;
//import net.minecraft.entity.player.EntityPlayer;
//import net.minecraft.network.play.client.C03PacketPlayer;
//import net.minecraft.util.BlockPos;
//import ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.settings.Setting;
//import org.lwjgl.input.Keyboard;
//import org.lwjgl.opengl.GL11;
//
//import java.awt.*;
//import java.util.ArrayList;
//import java.util.Set;
//
//public class TPAura extends Module {
//    public TPAura() {
//        super("Teleport Aura", Keyboard.KEY_K, Category.COMBAT);
//    }
//
//    private ArrayList<BlockPos> lastPath = new ArrayList<>();
//    private double oldX;
//    private double oldY;
//    EntityPlayer target;
//    private double oldZ;
//    private BlockPos serverPos;
//    private boolean resetPos;
//    private long lastAttack = 0;
//    private double animHealth = 1;
//    private double width;
//    private int colorPrimary;
//    private int colorSecondary;
//
//    public void teleport(BlockPos pos) {
//        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(pos.getX(), pos.getY(), pos.getZ(), true));
//        serverPos = pos;
//    }
//
//    public void teleport(double x, double y, double z) {
//        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, true));
//        serverPos = new BlockPos(x, y, z);
//    }
//
//    @Override
//    public void setup() {
//        this.setDisplayName("TP Aura \u00A77" + "Path");
//        Asyncware.instance.settingsManager.rSetting(new Setting("Gaps Length", this, 4, 2, 10, true));
//        Asyncware.instance.settingsManager.rSetting(new Setting("Max Distance", this, 20.0, 10.0, 300.0, false));
//        Asyncware.instance.settingsManager.rSetting(new Setting("Multi Targets", this, 1, 1, 10, true));
//        Asyncware.instance.settingsManager.rSetting(new Setting("Show RayTrace", this, true));
//        Asyncware.instance.settingsManager.rSetting(new Setting("APS", this, 2, 1.0, 10, false));
//        Asyncware.instance.settingsManager.rSetting(new Setting("One Hit", this, false));
//    }
//
//
//    public void preHit() {
//        KillAura ka = new KillAura();
//        long delay = (long) (1000 / Asyncware.instance.settingsManager.getSettingByName("APS").getValDouble());  // millis
//        double range = Asyncware.instance.settingsManager.getSettingByName("Max Distance").getValDouble();
//        int maxTargets = (int) Asyncware.instance.settingsManager.getSettingByName("Multi Targets").getValDouble();
//        oldX = mc.thePlayer.posX;
//        oldY = mc.thePlayer.posY;
//        oldZ = mc.thePlayer.posZ;
//        serverPos = mc.thePlayer.getPosition();
//        if (System.currentTimeMillis() - lastAttack >= delay) {
//            if (maxTargets == 1) {
//                target = (EntityPlayer) ka.target;
//                if (target != null) {
//                    if (canAttack(target)) {
//                        lastPath.clear();
//                        reachAndAttackPlayer(serverPos, target);
//                    }
//                }
//            }
//
//            else {
//                Set<EntityPlayer> targets = PlayerUtil.getClosests(range, maxTargets);
//                boolean cleared = false;
//                for (EntityPlayer target : targets) {
//                    if (target != null) {
//                        if (canAttack(target)) {
//                            if (! cleared) {
//                                lastPath.clear();
//                                cleared = true;
//                            }
//                            reachAndAttackPlayer(serverPos, target);
//                        }
//                    }
//                }
//            }
//        }
//    }
//
//    public void postHit() {
//        if (resetPos) {
//            double gap = Asyncware.instance.settingsManager.getSettingByName("Gaps Length").getValDouble();
//            BlockPos latestBlockRunned = serverPos;
//            final BlockPos[] path = PathFinder.findPath(latestBlockRunned, new BlockPos(oldX, oldY+1, oldZ));
//            for (BlockPos pos : path) {
//                if (PathFinder.distanceBetween(latestBlockRunned, pos) >= gap) {
//                    teleport(pos);
//                    latestBlockRunned = pos;
//                }
//            }
//            teleport(oldX, oldY, oldZ);
//            resetPos = false;
//        }
//    }
//
//    private void reachAndAttackPlayer(BlockPos from, EntityPlayer target) {
//        double gap = Asyncware.instance.settingsManager.getSettingByName("Gaps Length").getValDouble();
//        final BlockPos[] path = PathFinder.findPath(from, target.getPosition().add(0, 1, 0));
//        BlockPos latestBlockRunned = from;
//        for (int i = 0; i < path.length; i++)
//        {
//            if (PathFinder.distanceBetween(latestBlockRunned, path[i]) >= gap && PathFinder.distanceBetween(serverPos, target.getPosition()) > 3) {
//                teleport(path[i]);
//                lastPath.add(path[i]);
//                latestBlockRunned = path[i];
//            }
//        }
//        mc.thePlayer.swingItem();
//        mc.playerController.attackEntity(mc.thePlayer, target);
//        lastAttack = System.currentTimeMillis();
//        resetPos = true;
//    }
//
//    @Override
//    public void onEnable() {
//        super.onEnable();
//
//        if (Asyncware.instance.settingsManager.getSettingByName("One Hit").getValBoolean()) {
//            preHit();
//            postHit();
//            toggle();
//        }
//    }
//
//    @Punjabi
//    public void onPre(EventPreMotionUpdate event) {
//        preHit();
//    }
//
//    @Punjabi
//    public void onPost(EventPostMotionUpdate event) {
//        postHit();
//    }
//
//
//    @Punjabi
//    public void onRenderUI(Event2D e){
//
//        if (target != null) {
//            this.colorPrimary = Colors.darker(HUD.hudColor, 0.50f);
//            this.colorSecondary = HUD.hudColor;
//            GlStateManager.pushMatrix();
//            GlStateManager.translate(300.0f, 300.0f, 0.0f);
//            this.colorPrimary = Colors.darker(HUD.hudColor, 0.50f);
//            this.colorSecondary = HUD.hudColor;
//            GL11.glPushMatrix();
//            this.width = 107.5;
//            Gui.drawRect(-22.5, 0.0, 124.5, 50.0, new Color(24, 24, 24, 121).getRGB());
//            GL11.glTranslatef(-22.0f, -2.2f, 0.0f);
//            this.mc.fontRendererObj.drawString(this.target.getName(), 30.0f, 8.0f, -1, true);
//            GL11.glScalef(2.0f, 2.0f, 2.0f);
//            GL11.glTranslatef(-15.0f, -15.0f, 0.0f);
//            this.mc.fontRendererObj.drawStringWithShadow(Math.round(this.target.getHealth()) + "", 30.0f, 25.0f, HUD.hudColor);
//            this.mc.fontRendererObj.drawStringWithShadow("‚ù§", this.mc.fontRendererObj.getStringWidth(Math.round(this.target.getHealth()) + "") + 32, 25.0f, HUD.hudColor);
//            GL11.glTranslatef(15.0f, 15.0f, 0.0f);
//            GL11.glScalef(0.5f, 0.5f, 0.5f);
//            this.mc.fontRendererObj.drawString("", 30.0f, 25.0f, -1, true);
//            GuiInventory.drawEntityOnScreen(15, 47, 20, 2.0f, 2.0f, this.target);
//            this.animHealth += ((double)this.target.getHealth() - this.animHealth) / 32.0 * 0.7;
//            if (this.animHealth < 0.0 || this.animHealth > (double)this.target.getMaxHealth()) {
//                this.animHealth = this.target.getHealth();
//            } else {
//                GL11.glTranslatef(30.0f, 0.0f, 0.0f);
//                Gui.drawRect(0.0, 40.5, (int)this.width, 48.5, this.colorPrimary);
//                Gui.drawRect(0.0, 40.5, (int)(this.animHealth / (double)this.target.getMaxHealth() * this.width), 48.5, this.colorSecondary);
//            }
//            GL11.glScalef(2.0f, 2.0f, 2.0f);
//            GL11.glPopMatrix();
//            GlStateManager.popMatrix();
//
//        }
//
//
//
//    }
//
//
//    @Punjabi
//    public void onRender3D(Event3D event) {
//        if ((System.currentTimeMillis() - lastAttack <= 500) && Asyncware.instance.settingsManager.getSettingByName("Show RayTrace").getValBoolean()) {
//            for (BlockPos pos : lastPath) {
//                ESPUtil.blockESPBox(pos);
//         //       ESPUtil.drawTracerLine(pos.getX(), pos.getY(), pos.getZ(), 20, 255, 20, 255, 1);
////                new drawLine(mc.thePlayer.getPosition().getX(), mc.thePlayer.getPosition().getY(), mc.thePlayer.getPosition().getZ(),target.posX, target.posY, target.posZ, 1);
//            }
//        }
//    }
//
//    public boolean canAttack(EntityPlayer target) {
//        return target != mc.thePlayer && (!target.capabilities.isCreativeMode) && (!target.isDead) && target.isEntityAlive() && target.getHealth() > 0;
//    }
//
//}
//




package com.nquantum.module.combat;

import com.mojang.realmsclient.gui.ChatFormatting;
import com.nquantum.Asyncware;
import com.nquantum.event.Punjabi;
import com.nquantum.event.impl.*;
import com.nquantum.module.Category;
import com.nquantum.module.Module;
import com.nquantum.module.customize.HUD;
import com.nquantum.util.*;
import com.nquantum.util.color.Colors;
import com.nquantum.util.time.Timer;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MathHelper;
import ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.ok.settings.Setting;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.util.Random;

public class TPAura extends Module {
    public EntityLivingBase target;
    public long current;
    public long last;
    public int delay = 4;
    private int direction = -1;
    public float yaw;
    public float pitch;
    public boolean others;
    private double animHealth = 1.0;
    private double width;
    private int colorPrimary;
    private int colorSecondary;
    public int directiond;
    private Timer timer = new Timer();

    private double oldX;
    private double oldY;
    private double oldZ;

    public Random random = new Random();


    public TPAura(){
        super("Teleport Aura",0, Category.COMBAT);
    }

    @Override
    public void setup() {
        super.setup();
        Asyncware.instance.settingsManager.rSetting(new Setting("TP Aura Range", this, 100.0, 0.1, 300.0, false));
        Asyncware.instance.settingsManager.rSetting(new Setting("TP Aura APS", this, 10.0, 0.0, 20.0, true));
        Asyncware.instance.settingsManager.rSetting(new Setting("Render Raytrace", this, false));


    }


    public void teleport(BlockPos pos) {
        PacketUtil.sendPacketPlayer(new C03PacketPlayer.C04PacketPlayerPosition(pos.getX(), pos.getY(), pos.getZ(), false));
    }


    @Punjabi
    private synchronized void ListenPre(final EventPreMotionUpdate event){
        oldX = mc.thePlayer.posX;
        oldY = mc.thePlayer.posY;
        oldZ = mc.thePlayer.posZ;

        double range = Asyncware.instance.settingsManager.getSettingByName("TP Aura Range").getValDouble();
        target = getClosest(range);

        if(canAttack(target)){
            if (System.currentTimeMillis() - last >= 10) {
                PathFinder.findPath(mc.thePlayer.getPosition(), target.getPosition());

                teleport(target.getPosition());
                attack(target);
            }
        }
    }

    private void attack(Entity entity) {
        last = System.currentTimeMillis();
        double oldX = this.mc.thePlayer.lastTickPosX;
        double oldY = this.mc.thePlayer.lastTickPosY;
        double oldZ = this.mc.thePlayer.lastTickPosZ;
        this.mc.thePlayer.swingItem();
        this.mc.playerController.attackEntity(this.mc.thePlayer, entity);
    }

    @Punjabi
    private synchronized void ListenPost(final EventPostMotionUpdate event){
       if(this.timer.hasTimeElapsed(300L, true)){
           attack(target);
           teleport(new BlockPos(oldX, oldY, oldZ));
       }

    }

    @Punjabi
    private synchronized void ListenUpdate(final EventUpdate event){
        this.setDisplayName("Teleport Aura " + ChatFormatting.GRAY + "Dynamic");
    }

    @Punjabi
    private synchronized void Listen2D(final Event2D event){
        ScaledResolution sr = new ScaledResolution(mc);
        Asyncware.astofolo.drawStringWithShadow("Distance to entity: " + PathFinder.distanceBetween(mc.thePlayer.getPosition(), target.getPosition()),sr.getScaledWidth() / 2, sr.getScaledHeight() / 2 - 30, -1 );

        if (this.target != null && Asyncware.instance.moduleManager.getModuleByName("Teleport Aura").isToggled()) {
            GlStateManager.pushMatrix();
            GlStateManager.translate(300.0f, 300.0f, 0.0f);
            this.colorPrimary = Colors.darker(HUD.hudColor, 0.50f);
            this.colorSecondary = HUD.hudColor;
            GL11.glPushMatrix();
            this.width = 107.5;
            Gui.drawRect(-22.5, 0.0, 124.5, 50.0, new Color(24, 24, 24, 121).getRGB());
            GL11.glTranslatef(-22.0f, -2.2f, 0.0f);
            this.mc.fontRendererObj.drawString(this.target.getName(), 30.0f, 8.0f, -1, true);
            GL11.glScalef(2.0f, 2.0f, 2.0f);
            GL11.glTranslatef(-15.0f, -15.0f, 0.0f);
            this.mc.fontRendererObj.drawStringWithShadow(Math.round(this.target.getHealth()) + "", 30.0f, 25.0f, HUD.hudColor);
            this.mc.fontRendererObj.drawStringWithShadow("‚ù§", this.mc.fontRendererObj.getStringWidth(Math.round(this.target.getHealth()) + "") + 32, 25.0f, HUD.hudColor);
            GL11.glTranslatef(15.0f, 15.0f, 0.0f);
            GL11.glScalef(0.5f, 0.5f, 0.5f);
            this.mc.fontRendererObj.drawString("", 30.0f, 25.0f, -1, true);
            GuiInventory.drawEntityOnScreen(15, 47, 20, 2.0f, 2.0f, this.target);
            this.animHealth += ((double)this.target.getHealth() - this.animHealth) / 32.0 * 0.7;
            if (this.animHealth < 0.0 || this.animHealth > (double)this.target.getMaxHealth()) {
                this.animHealth = this.target.getHealth();
            } else {
                GL11.glTranslatef(30.0f, 0.0f, 0.0f);
                Gui.drawRect(0.0, 40.5, (int)this.width, 48.5, this.colorPrimary);
                Gui.drawRect(0.0, 40.5, (int)(this.animHealth / (double)this.target.getMaxHealth() * this.width), 48.5, this.colorSecondary);
            }
            GL11.glScalef(2.0f, 2.0f, 2.0f);
            GL11.glPopMatrix();
            GlStateManager.popMatrix();
        }

    }

    @Punjabi
    private synchronized void Listen3D(final Event3D event){

        if (target != null) {
            //if (entity instanceof EntityPlayer)
            final boolean bobbing = mc.gameSettings.viewBobbing;
            mc.gameSettings.viewBobbing = false;
       //     new drawLine(0, mc.thePlayer.getEyeHeight(), 0, target.posX - mc.thePlayer.posX, target.posY - mc.thePlayer.posY, target.posZ - mc.thePlayer.posZ, 0.05f);
        }
    }

    private boolean canAttack(EntityLivingBase player) {

       //  double range = Asyncware.instance.settingsManager.getSettingByName("KA Range").getValDouble();
       //  if(player instanceof EntityPlayer || player instanceof EntityAnimal || player instanceof EntityMob || player instanceof EntityVillager) {
       //      if (player instanceof EntityPlayer && !Asyncware.instance.settingsManager.getSettingByName("Players").getValBoolean())
       //          return false;
       //      if (player instanceof EntityAnimal && !Asyncware.instance.settingsManager.getSettingByName("Animals").getValBoolean())
       //          return false;
       //      if (player instanceof EntityMob && !Asyncware.instance.settingsManager.getSettingByName("Monsters").getValBoolean())
       //          return false;
       //      if (player instanceof EntityVillager && !Asyncware.instance.settingsManager.getSettingByName("Villagers").getValBoolean())
       //          return false;
       //  }
       //  if(player.isOnSameTeam(mc.thePlayer) && Asyncware.instance.settingsManager.getSettingByName("Teams").getValBoolean())
       //      return false;
       //  if(player.isInvisible() && !Asyncware.instance.settingsManager.getSettingByName("Invisibles").getValBoolean())
       //      return false;
       //  if(!isInFOV(player, Asyncware.instance.settingsManager.getSettingByName("FOV").getValDouble()))
       //      return false;
       //  return player != mc.thePlayer && player.isEntityAlive() && mc.thePlayer.getDistanceToEntity(player) <= range && player.ticksExisted > Asyncware.instance.settingsManager.getSettingByName("Existed").getValDouble();

        return player != this.mc.thePlayer;
    }



    public float[] getRotations(double posX, double posY, double posZ) {
        EntityPlayerSP player = this.mc.thePlayer;
        double x = posX - player.posX;
        double y = posY - (player.posY + (double)player.getEyeHeight());
        double z = posZ - player.posZ;
        double dist = MathHelper.sqrt_double(x * x + z * z);
        float yaw = (float)(Math.atan2(z, x) * 180.0 / Math.PI) - 90.0f;
        float pitch = (float)(-(Math.atan2(y, dist) * 180.0 / Math.PI));
        return new float[]{yaw, pitch};
    }

    private void updateTime() {
        this.current = System.nanoTime() / 1000000L;
    }

    private void resetTime() {
        this.last = System.nanoTime() / 1000000L;
    }

    private EntityLivingBase getClosest(double range) {
        double dist = range;
        EntityLivingBase target = null;
        for (Object object : this.mc.theWorld.loadedEntityList) {
            double currentDist;
            EntityLivingBase player;
            Entity entity = (Entity)object;
            if (!(entity instanceof EntityLivingBase) || !this.canAttack(player = (EntityLivingBase)entity) || !((currentDist = (double)this.mc.thePlayer.getDistanceToEntity(player)) <= dist)) continue;
            dist = currentDist;
            target = player;
        }
        return target;
    }

}
